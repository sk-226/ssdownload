name: Release

on:
  push:
    tags:
      - 'v*.*.*'

permissions:
  contents: write
  id-token: write  # For trusted publishing to PyPI

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for changelog

    - name: Install uv
      uses: astral-sh/setup-uv@v6
      with:
        version: "latest"

    - name: Set up Python 3.12
      run: uv python install 3.12

    - name: Install dependencies
      run: uv sync --all-extras --dev

    - name: Extract version from tag
      id: version
      run: |
        VERSION=${GITHUB_REF#refs/tags/v}
        echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
        echo "TAG=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

    - name: Verify version matches pyproject.toml
      run: |
        PROJECT_VERSION=$(uv run python -c "import tomllib; print(tomllib.load(open('pyproject.toml', 'rb'))['project']['version'])")
        if [ "$PROJECT_VERSION" != "${{ steps.version.outputs.VERSION }}" ]; then
          echo "Version mismatch: tag=${{ steps.version.outputs.VERSION }}, pyproject.toml=$PROJECT_VERSION"
          exit 1
        fi

    - name: Run tests
      run: |
        uv run ruff check src tests
        uv run ruff format --check src tests
        uv run mypy src
        uv run pytest tests -m "not slow" --cov=ssdownload

    - name: Build package
      run: uv build

    - name: Check package
      run: |
        uv run python -c "import pkgutil; print('Package structure looks good')"

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist-files
        path: dist/

  extract-changelog:
    runs-on: ubuntu-latest
    outputs:
      release-notes: ${{ steps.extract.outputs.release-notes }}

    steps:
    - uses: actions/checkout@v4

    - name: Extract changelog section
      id: extract
      run: |
        VERSION=${GITHUB_REF#refs/tags/v}

        # Extract changelog section for this version
        awk "/^## \[${VERSION}\]/ { flag=1; next } /^## \[/ { if(flag) exit } flag" CHANGELOG.md > release_notes.md

        # If no specific version section found, extract from [Unreleased]
        if [ ! -s release_notes.md ]; then
          awk '/^## \[Unreleased\]/ { flag=1; next } /^## \[/ { if(flag) exit } flag' CHANGELOG.md > release_notes.md
        fi

        # Read the content and set as output
        RELEASE_NOTES=$(cat release_notes.md)
        echo "release-notes<<EOF" >> $GITHUB_OUTPUT
        echo "$RELEASE_NOTES" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

  publish-pypi:
    runs-on: ubuntu-latest
    needs: [build]
    environment: release

    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: dist-files
        path: dist/

    - name: Publish to PyPI
      run: uv publish

  create-release:
    runs-on: ubuntu-latest
    needs: [build, extract-changelog, publish-pypi]

    steps:
    - uses: actions/checkout@v4

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: dist-files
        path: dist/

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ github.ref_name }}
        name: Release ${{ github.ref_name }}
        body: |
          ## Release ${{ github.ref_name }}

          ${{ needs.extract-changelog.outputs.release-notes }}

          ## Installation

          ```bash
          pip install ssdownload==${{ github.ref_name }}
          ```

          or

          ```bash
          uv add ssdownload==${{ github.ref_name }}
          ```

          ---

          ü§ñ This release was automatically created by GitHub Actions.
        files: |
          dist/*.whl
          dist/*.tar.gz
        draft: false
        prerelease: ${{ contains(github.ref_name, 'alpha') || contains(github.ref_name, 'beta') || contains(github.ref_name, 'rc') }}

  notify-success:
    runs-on: ubuntu-latest
    needs: [publish-pypi, create-release]
    if: success()

    steps:
    - name: Release success notification
      run: |
        echo "üéâ Successfully released ${{ github.ref_name }}"
        echo "üì¶ Package published to PyPI"
        echo "üìã GitHub Release created"

  notify-failure:
    runs-on: ubuntu-latest
    needs: [build, extract-changelog, publish-pypi, create-release]
    if: failure()

    steps:
    - name: Release failure notification
      run: |
        echo "‚ùå Release ${{ github.ref_name }} failed"
        echo "Please check the workflow logs and fix any issues"
        exit 1
